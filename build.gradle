plugins {
  id 'application'
  id 'jacoco'
  id 'idea'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.4.3'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.0.1.5171'
  /*
    Applies analysis tools including checkstyle and OWASP Dependency checker.
    See https://github.com/hmcts/gradle-java-plugin
 */
  id 'uk.gov.hmcts.java' version '0.12.65'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

idea {
  module {
    testSources.from(project.sourceSets.integrationTest.java.srcDirs)
    testSources.from(project.sourceSets.functionalTest.java.srcDirs)
    testSources.from(project.sourceSets.smokeTest.java.srcDirs)
    testResources.from(project.sourceSets.integrationTest.resources.srcDirs)
    testResources.from(project.sourceSets.functionalTest.resources.srcDirs)
    testResources.from(project.sourceSets.smokeTest.resources.srcDirs)
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

project.tasks['jacocoTestReport'].dependsOn test, integration

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: disposer-fee-and-pay"
    property "sonar.projectKey", "uk.gov.hmcts.reform:disposer-fee-and-pay"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.coverage.exclusions", "**/disposer/Application.java"
    property "sonar.sources", "src/main/java"
    property "sonar.tests", "src/test/java,src/smokeTest/java,src/functionalTest/java,src/integrationTest/java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url = 'https://jitpack.io' }
}

def versions = [
  log4J    : '2.24.3',
  logback  : '1.5.14',
  lombok   : '1.18.36'
]

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.8'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4J
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4J
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: versions.logback
  implementation group: 'ch.qos.logback', name: 'logback-core', version: versions.logback

  implementation group: 'io.rest-assured', name: 'rest-assured'

  testImplementation(platform('org.junit:junit-bom:5.12.0'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
	testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
	testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
}

application {
  mainClass = 'uk.gov.hmcts.reform.disposer.Application'
}

bootJar {
  archiveFileName = "disposer-fee-and-pay.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
