plugins {
  id 'application'
  id 'jacoco'
  id 'idea'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.5'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.3.1.5724'
  id 'org.owasp.dependencycheck' version '12.1.6'
  /*
    Applies analysis tools including checkstyle and OWASP Dependency checker.
    See https://github.com/hmcts/gradle-java-plugin
 */
  id 'uk.gov.hmcts.java' version '0.12.67'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

idea {
  module {
    testSources.from(project.sourceSets.integrationTest.java.srcDirs)
    testSources.from(project.sourceSets.functionalTest.java.srcDirs)
    testSources.from(project.sourceSets.smokeTest.java.srcDirs)
    testResources.from(project.sourceSets.integrationTest.resources.srcDirs)
    testResources.from(project.sourceSets.functionalTest.resources.srcDirs)
    testResources.from(project.sourceSets.smokeTest.resources.srcDirs)
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly
  cucumberRuntime.extendsFrom testImplementation

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

tasks.register("functional", Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.register("integration", Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

tasks.register("fortifyScan", JavaExec) {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

tasks.register("smoke", Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

project.tasks['jacocoTestReport'].dependsOn test, integration

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: disposer-fee-and-pay"
    property "sonar.projectKey", "uk.gov.hmcts.reform:disposer-fee-and-pay"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.coverage.exclusions", "**/disposer/Application.java"
    property "sonar.sources", "src/main/java"
    property "sonar.tests", "src/test/java,src/smokeTest/java,src/functionalTest/java,src/integrationTest/java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
  }
}

def versions = [
  cucumber      : '7.23.0',
  fortify       : '1.4.10',
  junitPlatform : '1.12.2',
  log4J         : '2.25.2',
  logback       : '1.5.18',
  lombok        : '1.18.40',
  serviceAuthClient: '5.3.3',
  wiremock      : '3.13.1'
]

configurations.configureEach {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails dep ->
      if (dep.requested.name == 'commons-fileupload') {
        // CVE-2025-48976
        dep.useVersion '1.6.0'
      }
    }
  }
}

dependencies {
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: versions.logback
  implementation group: 'ch.qos.logback', name: 'logback-core', version: versions.logback
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.serviceAuthClient
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'
  implementation group: 'io.rest-assured', name: 'rest-assured'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4J
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4J
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: versions.fortify, classifier: 'all'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  integrationTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  functionalTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  integrationTestImplementation group: 'org.junit.platform', name: 'junit-platform-suite-api', version: versions.junitPlatform
  integrationTestImplementation group: 'org.junit.platform', name: 'junit-platform-suite-engine', version: versions.junitPlatform
  integrationTestImplementation group: 'org.wiremock', name: 'wiremock-standalone', version: versions.wiremock
  integrationTestImplementation group: 'io.cucumber', name: 'cucumber-java', version: versions.cucumber
  integrationTestImplementation group: 'io.cucumber', name: 'cucumber-spring', version: versions.cucumber
  integrationTestImplementation group: 'io.cucumber', name: 'cucumber-junit-platform-engine', version: versions.cucumber
}

application {
  mainClass = 'uk.gov.hmcts.reform.disposer.Application'
}

bootJar {
  archiveFileName = "disposer-fee-and-pay.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
